#VRML_SIM R2020a utf8
# tags: static

PROTO Victim [
    field SFVec3f    translation       0 0 0
    field SFRotation rotation          0 -0.70711 0.707104 3.14159
    field SFString   name              "victim"
    field SFInt32    found             0
    field SFString   type              "harmed"
    field SFInt32    scoreWorth        10
]
{
    Solid {
        %{
            -- load lua-gd module and create a uniform texture
            local gd = require("gd")
            local debug = require("debug")
            local wbrandom = require('wbrandom')
            
            local im = gd.createTrueColor(128, 128)
            color = im:colorAllocate( 255, 255 , 255)
            im:filledRectangle(0, 0, 127, 127, color)
    
            -- add the text in the texture
            if fields.found.value == 0 then
                textColor = im:colorAllocate(0, 0, 0)
            else
                textColor = im:colorAllocate(100, 100, 100)
            end

            gd.fontCacheSetup()

            if fields.type.value == 'harmed' or fields.type.value == 'h' or fields.type.value == 'H' then
                im:stringFT(textColor, "Arial", 96, 0, 18, 112, 'H')
            elseif fields.type.value == 'unharmed' or fields.type.value == 'u' or fields.type.value == 'U' then
                im:stringFT(textColor, "Arial", 96, 0, 18, 112, 'U')
            elseif fields.type.value == 'stable' or fields.type.value == 's' or fields.type.value == 'S' then
                im:stringFT(textColor, "Arial", 96, 0, 18, 112, 'S')
            end

            -- save the image in a png file
            local name = debug.getinfo(1,'S').source  -- get the name of the current file
            name = name .. wbrandom.integer(0, 100000)  -- add a random number to reduce name clashes
            local i = 0  -- make sure the file does not already exist
            local file = io.open(name .. i .. ".png", "r")
            while file do
                file:close()
                i = i + 1
                file = io.open(name .. i .. ".png", "r")
            end
            im:png(name .. i .. ".png")
            gd.fontCacheShutdown()

        }%
        translation IS translation
        rotation IS rotation
        scale 0.04 0.04 0.04
        children [
            Transform {
                translation 0 0 0
                children [
                    Shape {
                        appearance Appearance {
                            texture DEF human0texture ImageTexture {
                                url [ %{= '"' .. context.temporary_files_path .. name .. i .. '.png"' }% ]
                            }
                        }
                        geometry Plane {
                        }
                    }
                ]
            }
        ]
        recognitionColors [
            1 1 1
        ]
    }
}

